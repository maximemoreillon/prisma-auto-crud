stages:
  - build
  - test
  - release

variables:
  APPLICATION_NAME: auto-crud

  CONTAINER_TAG: ${CI_COMMIT_TAG}
  CONTAINER_IMAGE: ${DOCKER_HUB_USERNAME}/${APPLICATION_NAME}
  CONTAINER_IMAGE_TEST: ${CONTAINER_IMAGE}:test
  CONTAINER_IMAGE_LATEST: ${CONTAINER_IMAGE}:latest
  CONTAINER_IMAGE_TAGGED: ${CONTAINER_IMAGE}:${CONTAINER_TAG}

  TEST_NETWORK: tdd
  TEST_DB: tdd-db
  TEST_DB_USERNAME: postgres
  TEST_DB_PASSWORD: keyboardcat

image: moreillon/ci-dind
services:
  - name: docker:24.0.7-dind

build:
  stage: build
  tags:
    - dind
  before_script:
    - echo "${DOCKER_HUB_PASSWORD}" | docker login --username ${DOCKER_HUB_USERNAME} --password-stdin;
  script:
    - docker build -t ${CONTAINER_IMAGE_TEST} .
    - docker push ${CONTAINER_IMAGE_TEST}

test:
  stage: test
  tags:
    - dind
  # coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  before_script:
    - echo "${DOCKER_HUB_PASSWORD}" | docker login --username ${DOCKER_HUB_USERNAME} --password-stdin
    # Creating network for TDD
    - docker network create ${TEST_NETWORK}
    # Creating DB container in network
    - >
      docker run
      -d
      --rm
      --name ${TEST_DB}
      --network ${TEST_NETWORK}
      --hostname ${TEST_DB}
      --env POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
      --env POSTGRES_DB=${TEST_DB}
      postgres:15
    - sleep 30 # Wait for DB to become available
  script:
    # Run tests
    - >
      docker run
      --rm
      --name tdd-app
      --network ${TEST_NETWORK}
      -e DATABASE_URL=postgresql://postgres:${TEST_DB_PASSWORD}@${TEST_DB}:30432/${TEST_DB}?schema=public
      ${CONTAINER_IMAGE_TEST}
      bunx prisma init && bunx prisma db pull && bunx prisma generate && bun test

## Release

container:
  stage: release
  only:
    - tags
  tags:
    - dind
  before_script:
    - echo "${DOCKER_HUB_PASSWORD}" | docker login --username ${DOCKER_HUB_USERNAME} --password-stdin;
  script:
    - docker pull ${CONTAINER_IMAGE_TEST}
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE_TAGGED}
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE_LATEST}
    - docker push ${CONTAINER_IMAGE_LATEST}
    - docker push ${CONTAINER_IMAGE_TAGGED}

npm:
  stage: release
  image: node:20
  only:
    - tags
  tags:
    - dind
  before_script:
    - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
  script:
    - npm i
    - npm run compile
    - npm publish --access=public
